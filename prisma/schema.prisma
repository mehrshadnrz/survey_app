generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum QuestionType {
  MULTIPLE_CHOICE
  SHORT_TEXT
  LONG_TEXT
  PSYCHOLOGY
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  password      String
  first_name    String
  last_name     String
  phone_number  String    @unique
  identity_code String    @unique
  role          Role      @default(USER)
  surveys       Survey[]  @relation("UserSurveys")
  responses     Response[]
  authoredExams Exam[]    @relation("UserExams")
}

model Survey {
  id                    Int            @id @default(autoincrement())
  title                 String
  description           String
  creationDate          DateTime       @default(now())
  authorId              Int
  author                User           @relation(fields: [authorId], references: [id], name: "UserSurveys")
  questions             Question[]
  factors               Factor[]
  examSurveys           ExamSurvey[]   @relation("SurveyExams")
}

model Question {
  id            Int       @id @default(autoincrement())
  surveyId      Int
  questionText  String
  correctAnswer String?
  correctOption Int?
  questionType  QuestionType
  image         String?
  order         Int
  point         Float?
  survey        Survey    @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  options       Option[]
  answers       Answer[]
}

model Option {
  id           Int          @id @default(autoincrement())
  questionId   Int
  optionText   String
  image        String?
  order        Int
  question     Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers      Answer[]
  factorImpacts FactorImpact[]
}

model Response {
  id            Int          @id @default(autoincrement())
  responseDate  DateTime     @default(now())
  userId        Int
  user          User         @relation(fields: [userId], references: [id])
  examSessionId Int
  examSession   ExamSession? @relation(fields: [examSessionId], references: [id], onDelete: Cascade)
  answers       Answer[]
}

model Answer {
  id          Int       @id @default(autoincrement())
  responseId  Int
  questionId  Int
  optionId    Int?
  answerText  String?
  response    Response  @relation(fields: [responseId], references: [id])
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option      Option?   @relation(fields: [optionId], references: [id], onDelete: Cascade)
}

model Factor {
  id          Int       @id @default(autoincrement())
  name        String
  surveyId    Int
  survey      Survey    @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  impacts     FactorImpact[]
}

model FactorImpact {
  id          Int       @id @default(autoincrement())
  factorId    Int
  optionId    Int
  impact      Int
  plus        Boolean
  factor      Factor    @relation(fields: [factorId], references: [id], onDelete: Cascade)
  option      Option    @relation(fields: [optionId], references: [id], onDelete: Cascade)
}

model Exam {
  id                    Int            @id @default(autoincrement())
  title                 String
  description           String
  creationDate          DateTime       @default(now())
  isPublic              Boolean        @default(false)
  isActive              Boolean        @default(false)
  viewableByAuthorOnly  Boolean        @default(false)
  authorId              Int
  author                User           @relation(fields: [authorId], references: [id], name: "UserExams")
  examSurveys           ExamSurvey[]   @relation("SurveyExams")
  sessions              ExamSession[]
}

model ExamSurvey {
  id        Int    @id @default(autoincrement())
  examId    Int
  surveyId  Int
  order     Int
  exam      Exam   @relation(fields: [examId], references: [id], onDelete: Cascade, name: "SurveyExams")
  survey    Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade, name: "SurveyExams")
}

model ExamSession {
  id               Int       @id @default(autoincrement())
  examId           Int
  startTime        DateTime
  endTime          DateTime?
  duration         Int?
  timerOnQuestion  Boolean
  exam             Exam      @relation(fields: [examId], references: [id], onDelete: Cascade)
  responses        Response[]
}
