generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum QuestionType {
  MULTIPLE_CHOICE
  TEXT_INPUT
  RATING
  FILE_UPLOAD
  DATE_PICKER
}

model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  email         String   @unique
  password      String
  first_name    String
  last_name     String
  phone_number  String   @unique
  identity_code String   @unique
  role     Role     @default(USER)
  surveys  Survey[] @relation("UserSurveys")
  responses Response[]
}

model Survey {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  creationDate DateTime  @default(now())
  start_time   DateTime?
  end_time     DateTime?
  isPublic     Boolean   @default(false)
  viewableByAuthorOnly Boolean  @default(false)
  authorId     Int
  author       User      @relation(fields: [authorId], references: [id], name: "UserSurveys")
  questions    Question[]
  responses    Response[]
}

model Question {
  id            Int       @id @default(autoincrement())
  surveyId      Int
  questionText  String
  correctAnswer String
  questionType          QuestionType
  image         String?
  survey        Survey    @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  options       Option[]
  answers       Answer[]
}

model Option {
  id         Int      @id @default(autoincrement())
  questionId Int
  optionText String
  image      String?
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers    Answer[]
}

model Response {
  id           Int       @id @default(autoincrement())
  surveyId     Int
  userId       Int
  responseDate DateTime  @default(now())
  survey       Survey    @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id])
  answers      Answer[]
}

model Answer {
  id         Int       @id @default(autoincrement())
  responseId Int
  questionId Int
  optionId   Int?
  answerText String?
  response   Response  @relation(fields: [responseId], references: [id])
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  option     Option?   @relation(fields: [optionId], references: [id], onDelete: Cascade)
}
